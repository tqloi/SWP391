@model DoTestViewModel

@{
    ViewData["Title"] = "Do Test";
    Layout = null;
    <partial name="_NoficationPartial" />
}
<!-- No layout were uses, don't remove the head pls -->
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Take Test</title>

    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">

    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">

    <!-- Custom CSS for additional styling -->
    <link rel="stylesheet" href="~/css/DoTest.css" />

    <!-- Initialize totalQuestions for the JavaScript code -->
    <script>
        var totalQuestions = @Model.Questions.Count();
        var timeLeft = @Model.TimeLeft;
    </script>
</head>
@if (User.IsInRole("Student"))
{
    <form asp-action="DoTest" asp-controller="Test" method="post">
        <!-- Hidden fields for course, courseID, and testID -->
        <input type="hidden" name="course" value="@ViewBag.Course" />
        <input type="hidden" name="courseID" value="@ViewBag.CourseID" />
        <input type="hidden" name="testID" value="@ViewBag.TestID" />

        @Html.AntiForgeryToken()
        <div class="container">
            <div class="test-container">
                <!-- Left-side question navigation with timer -->
                <div class="question-nav">

                    <div class="timer mb-4">
                        Time left: @Model.TimeLeft
                    </div>

                    <div class="progress mb-4">
                        <div class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>

                    <!-- Question navigation buttons -->
                    <div class="question-nav-buttons">
                        @for (int i = 1; i <= Model.Questions.Count(); i++)
                        {
                            <button type="button" class="btn @(i == 1 ? "btn-primary active" : "btn-secondary")" onclick="showQuestion(@i - 1)">@i</button>
                        }
                    </div>

                    <button type="submit" onclick="openConfirmModal()" class="btn btn-danger w-100 mt-3">Submit</button>
                </div>

                <!-- Right-side question and answers section -->
                <div class="question-content">
                    @{
                        int questionNumber = 1;
                    }
                    @foreach (var question in Model.Questions.Select((q, index) => new { Question = q, Index = index }))
                    {
                        // The 'question' variable now holds an anonymous object
                        // containing the current QuestionModel (q) and its index (position) in the collection.

                        <div class="question-box" id="question-@question.Index" style="display: @(question.Index == 0 ? "block" : "none");">
                            <!-- Each question is wrapped in a div with a unique ID based on its index. -->

                            <h5><strong>Question @questionNumber:</strong> @question.Question.Question</h5>
                            <!-- Display the question ID and the question text. -->
                            @if (!string.IsNullOrEmpty(question.Question.ImagePath))
                            {
                                <div class="mt-3">
                                    <img src="@question.Question.ImagePath" alt="Question Image" class="img-fluid img-thumbnail" style="max-width: 500px; max-height: 500px;" />
                                    <!-- If the question has an associated image, display it. -->
                                </div>
                            }

                            <div class="answer-options">
                                <!-- For each question, create answer options. -->
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="answers[@question.Question.QuestionID]" value="A" id="answerA-@question.Question.QuestionID">
                                    <label class="form-check-label" for="answerA-@question.Question.QuestionID">
                                        A. @question.Question.AnswerA
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="answers[@question.Question.QuestionID]" value="B" id="answerB-@question.Question.QuestionID">
                                    <label class="form-check-label" for="answerB-@question.Question.QuestionID">
                                        B. @question.Question.AnswerB
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="answers[@question.Question.QuestionID]" value="C" id="answerC-@question.Question.QuestionID">
                                    <label class="form-check-label" for="answerC-@question.Question.QuestionID">
                                        C. @question.Question.AnswerC
                                    </label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="answers[@question.Question.QuestionID]" value="D" id="answerD-@question.Question.QuestionID">
                                    <label class="form-check-label" for="answerD-@question.Question.QuestionID">
                                        D. @question.Question.AnswerD
                                    </label>
                                </div>
                                <!-- Each answer option is a radio button, allowing the user to select only one answer per question. -->
                            </div>
                        </div>
                        questionNumber++;
                    }

                    <!-- Next question button -->
                    <div class="next-button mt-4">
                        <button type="button" class="btn btn-success" onclick="nextQuestion()">Next question <i class="fas fa-arrow-right"></i></button>
                    </div>
                </div>
            </div>
        </div>
    </form>
}
else
{
    <h1>Your are not allowed</h1>
}
<!-- Modal -->
<div id="customConfirmModal" class="modal">
    <div class="modal-content">
        <p>Submit the test?</p>
        <button id="confirmSubmit" class="btn btn-danger">Yes</button>
        <button id="cancelSubmit" class="btn btn-secondary">No</button>
    </div>
</div>

<!-- Bootstrap JS for functionality -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

<!-- Include JavaScript for question navigation and timer -->
<!--bust the cache by appending a query string to js file URL in the HTML.-->
<script src="~/js/DoTest.js?v=@DateTime.Now.Ticks"></script>