@model ListCommentViewModel
@{
    var LectureID = Model.LectureID;
}

<style>
    .comment {
        color: black;
        display: flex;
        align-items: flex-start;
        margin-top: 10px;
    }

        .comment .profile-pic {
            width: 40px;
            height: 40px;
            object-fit: cover;
            border-radius: 50%;
            margin-right: 10px;
        }

        .comment .content-container {
            flex: 1;
        }

        .comment .content {
            background-color: #F0F0F0;
            color: black;
            font-size: 15px;
            border-radius: 10px;
            padding: 10px;
            margin-top: 5px;
            margin-right: 10px
        }

        .comment .comment-timestamp {
            font-size: 12px;
            color: #666;
            margin-right: 15px
        }

    .reply-link {
        cursor: pointer;
        font-size: 14px;
    }

    .reply-form-container {
        display: none;
    }

</style>

@if (Model.Comments == null || !Model.Comments.Any())
{
    <div style="height: 10px"></div>
}
else
{
    <div class="list-comment">
        @foreach (var comment in Model.Comments)
        {
            var commentID = comment.CommentID;
            var displaydate = comment.Timestamp.Date == DateTime.Today
            ? comment.Timestamp.ToString("hh:mm tt").Replace("sa", "am").Replace("ch", "pm")
            : comment.Timestamp.ToString("hh:mm tt dd/MM/yyyy").Replace("sa", "am").Replace("ch", "pm");

            <div class="comment">
                <!-- Avatar -->
                <img src="@comment.User.ProfileImagePath" class="profile-pic" alt="User Avatar">

                <!-- Comment content -->
                <div class="content-container">
                    <div class="d-flex justify-content-between">
                        <span class="fw-bold" style="font-size: 15px;">@comment.User.FirstName @comment.User.LastName</span>
                        <span class="comment-timestamp">@displaydate</span>
                    </div>
                    <div class="content">
                        @comment.Content
                    </div>
                    <div>
                        <a href="javascript:void(0);" onclick="toggleReplyForm(@commentID)" class="reply-link">Reply</a>

                        <!-- Reply form -->
                        <div id="replyFormContainer-@comment.CommentID" class="reply-form-container">
                            <form asp-action="Create" asp-controller="Comment" method="post" class="input-group d-flex align-items-end my-1" style="transform: scale(0.9); transform-origin: left top;">
                                <input type="hidden" name="LectureID" value="@LectureID" />
                                <input type="hidden" name="ParentCmtId" value="@commentID" />

                                <label for="file-upload" class="btn btn-info mr-2 mt-auto active m-0 d-flex align-items-center" style="border-radius: 20px; height: 40px;">
                                    <i class="bi bi-plus-lg"></i>
                                </label>
                                <input type="file" id="file-upload" class="d-none" name="CommentFile" accept=".pdf,.doc,.docx,.ppt,.pptx, image/*" multiple>

                                <textarea id="Content" type="text" name="Content" class="form-control Comment-Content" placeholder="Write your comment" rows="1" style="border-radius: 20px; resize: none;" required></textarea>

                                <button type="submit" class="btn btn-info ml-2 mt-auto" style="border-radius: 20px; height: 40px;">
                                    <i class="bi bi-send-fill"></i>
                                </button>
                            </form>
                        </div>

                        <script>
                            document.addEventListener('DOMContentLoaded', () => {
                                // Lấy tất cả các textarea có class 'Content'
                                const textareas = document.querySelectorAll('.Comment-Content');

                                    // Lặp qua từng textarea và thêm sự kiện 'input'
                                    textareas.forEach(textarea => {
                                        textarea.addEventListener('input', () => {
                                            textarea.style.height = 'auto'; // Đặt lại chiều cao trước khi tính toán
                                            textarea.style.height = `${textarea.scrollHeight}px`; // Đặt chiều cao dựa trên nội dung
                                        });
                                    });
                                });
                        </script>
                        @await Component.InvokeAsync("Comment", new { lectureId = LectureID, ParentCommentID = commentID })
                    </div>
                </div>
            </div>
        }
    </div>
}

<script>
    function toggleReplyForm(commentID) {
        var replyForm = document.getElementById('replyFormContainer-' + commentID);
        replyForm.style.display = replyForm.style.display === 'none' || replyForm.style.display === '' ? 'block' : 'none';

        // Nếu form được hiển thị, tìm textarea và focus vào nó
        if (replyForm.style.display === 'block') {
            var textarea = replyForm.querySelector('textarea');
            if (textarea) {
                textarea.focus(); // Tự động focus vào textarea
            }
        }
    }
</script>